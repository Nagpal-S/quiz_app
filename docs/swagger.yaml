basePath: /
definitions:
  controllers.APIResponse:
    properties:
      details:
        $ref: '#/definitions/controllers.WalletDetails'
      message:
        example: User wallet details found.
        type: string
      status:
        example: "1"
        type: string
    type: object
  controllers.BannerDetails:
    properties:
      ID:
        description: Unique ID of the banner
        example: 1
        type: integer
      banner:
        description: URL of the banner image
        example: image-url
        type: string
      crated:
        description: Timestamp of banner creation
        example: "2024-12-31T17:00:00+05:30"
        type: string
    type: object
  controllers.ContestHistoryInfo:
    properties:
      contest_amount:
        example: 10000
        type: integer
      contest_date:
        example: "2024-12-21T18:00:00+05:30"
        type: string
      contest_end_date:
        example: "2024-12-21T18:00:00+05:40"
        type: string
      contest_id:
        example: 1
        type: integer
      contest_name:
        example: GK
        type: string
      contest_question_duration:
        example: 15
        type: integer
      points:
        example: 175
        type: integer
      prize_amount:
        example: 175
        type: integer
    type: object
  controllers.ContestInfo:
    properties:
      contest_amount:
        example: 10000
        type: integer
      contest_date:
        example: "2024-12-21T18:00:00+05:30"
        type: string
      contest_end_date:
        example: "2024-12-21T18:00:00+05:40"
        type: string
      contest_id:
        example: 1
        type: integer
      contest_name:
        example: GK
        type: string
      contest_question_duration:
        example: 15
        type: integer
    type: object
  controllers.Details:
    properties:
      quiz_result:
        description: '@Description List of quiz results for the user'
        items:
          $ref: '#/definitions/controllers.QuizResult'
        type: array
      total_points:
        description: '@Description Total points scored by the user'
        type: integer
    type: object
  controllers.GetBannersListResponse:
    properties:
      details:
        description: Array of banner details
        items:
          $ref: '#/definitions/controllers.BannerDetails'
        type: array
      message:
        description: Response message
        example: Banners list found.
        type: string
      status:
        description: Status of the request
        example: "1"
        type: string
    type: object
  controllers.GetUserContestLeaderboardResponse:
    properties:
      details:
        items:
          $ref: '#/definitions/controllers.LeaderboardEntry'
        type: array
      message:
        example: Leaderboard data found successfully.
        type: string
      status:
        example: "1"
        type: string
    type: object
  controllers.GetUserContestReportResponse:
    properties:
      details:
        allOf:
        - $ref: '#/definitions/controllers.Details'
        description: '@Description Details of the quiz result'
      message:
        description: '@Description Message in the response'
        example: User result found
        type: string
      status:
        description: '@Description Status of the response'
        example: "1"
        type: string
    type: object
  controllers.GetUserPlayedContestResponse:
    properties:
      details:
        items:
          $ref: '#/definitions/controllers.ContestHistoryInfo'
        type: array
      message:
        example: Contest list found.
        type: string
      status:
        example: "1"
        type: string
    type: object
  controllers.JoinContestResponse:
    properties:
      message:
        example: Contest joined successfully.
        type: string
      status:
        example: "1"
        type: string
    type: object
  controllers.JoinedContestResponse:
    properties:
      details:
        items:
          $ref: '#/definitions/controllers.ContestInfo'
        type: array
      message:
        example: Contest list found.
        type: string
      status:
        example: "1"
        type: string
    type: object
  controllers.LeaderboardEntry:
    properties:
      points:
        example: 175
        type: integer
      prize_amount:
        example: 0
        type: integer
      user_image:
        example: image
        type: string
      user_name:
        example: snagpal
        type: string
    type: object
  controllers.OTPResponse:
    properties:
      details:
        properties:
          otp:
            example: "8162"
            type: string
          userId:
            example: 3
            type: integer
        type: object
      message:
        example: New user created
        type: string
      status:
        example: "1"
        type: string
    type: object
  controllers.Prize:
    properties:
      category_id:
        example: 1
        type: integer
      created_at:
        example: "2024-12-26T19:08:03+05:30"
        type: string
      id:
        example: 1
        type: integer
      rank_from:
        example: 1
        type: integer
      rank_to:
        example: 1
        type: integer
      winning:
        example: 25000
        type: number
    type: object
  controllers.PrizesResponse:
    properties:
      details:
        items:
          $ref: '#/definitions/controllers.Prize'
        type: array
      message:
        example: Prizes list found.
        type: string
      status:
        example: "1"
        type: string
    type: object
  controllers.QAResponse:
    properties:
      message:
        example: User response recorded successfully.
        type: string
      status:
        example: "1"
        type: string
    type: object
  controllers.Question:
    properties:
      category_id:
        example: 1
        type: integer
      correct_answer:
        example: c
        type: string
      created_at:
        example: "2024-12-18T14:16:53+05:30"
        type: string
      id:
        example: 1
        type: integer
      level:
        example: easy
        type: string
      option_a:
        example: Unites States of America
        type: string
      option_b:
        example: England
        type: string
      option_c:
        example: India
        type: string
      option_d:
        example: Sri Lanka
        type: string
      question:
        example: Where is Delhi?
        type: string
    type: object
  controllers.QuizResponse:
    properties:
      details:
        properties:
          category_id:
            example: 1
            type: integer
          category_name:
            example: GK
            type: string
          questions:
            items:
              $ref: '#/definitions/controllers.Question'
            type: array
          questions_duration:
            example: 60
            type: integer
          quiz_end_time:
            example: "2024-12-24T18:57:33+05:30"
            type: string
          quiz_start_time:
            example: "2024-12-24T14:00:00+05:30"
            type: string
        type: object
      message:
        example: Quiz question list found.
        type: string
      status:
        example: "1"
        type: string
    type: object
  controllers.QuizResult:
    properties:
      answer_a:
        description: '@Description Option A of the question'
        example: United States of America
        type: string
      answer_b:
        description: '@Description Option B of the question'
        example: England
        type: string
      answer_c:
        description: '@Description Option C of the question'
        example: India
        type: string
      answer_d:
        description: '@Description Option D of the question'
        example: Sri Lanka
        type: string
      correct_answer:
        description: '@Description The correct answer for the question'
        example: c
        type: string
      points:
        description: '@Description Points scored for this particular question'
        example: 80
        type: integer
      question:
        description: '@Description The question asked in the quiz'
        example: Where is Delhi?
        type: string
      time_taken:
        description: '@Description Points scored for this particular question'
        example: 1
        type: integer
      user_answer:
        description: '@Description The answer given by the user'
        example: c
        type: string
      user_answer_type:
        description: '@Description Whether the answer is "CORRECT" or "WRONG"'
        example: CORRECT
        type: string
    type: object
  controllers.Rule:
    properties:
      category_id:
        example: 1
        type: integer
      created_at:
        example: "2024-12-25T16:11:37+05:30"
        type: string
      id:
        example: 1
        type: integer
      rule:
        example: Complete question on time
        type: string
    type: object
  controllers.RulesResponse:
    properties:
      details:
        items:
          $ref: '#/definitions/controllers.Rule'
        type: array
      message:
        example: Rules list found
        type: string
      status:
        example: "1"
        type: string
    type: object
  controllers.Transaction:
    properties:
      amount:
        example: 20
        type: number
      created:
        example: "2024-12-18T23:04:50+05:30"
        type: string
      title:
        example: Deposit
        type: string
      transaction_type:
        example: CREDIT
        type: string
    type: object
  controllers.WalletDetails:
    properties:
      transactions:
        items:
          $ref: '#/definitions/controllers.Transaction'
        type: array
      wallet:
        type: number
    type: object
  controllers.categoryInfo:
    properties:
      details:
        items:
          properties:
            active:
              example: "1"
              type: string
            created:
              example: "2024-12-17T18:07:19+05:30"
              type: string
            icon:
              example: https://quizbuck.s3.ap-south-1.amazonaws.com/uploads/1734090491_new.jpg
              type: string
            id:
              example: 1
              type: integer
            join_amount:
              example: 100
              type: integer
            num_of_users_can_join:
              example: 20
              type: integer
            num_of_users_have_joined:
              example: 0
              type: integer
            quiz_time:
              example: "2024-12-17T18:00:00+05:30"
              type: string
            title:
              example: GK
              type: string
            total_price:
              example: 100000
              type: integer
            user_has_joined:
              example: true
              type: boolean
          type: object
        type: array
      message:
        example: Category list data found.
        type: string
      status:
        example: "1"
        type: string
    type: object
  controllers.editProfileResponse:
    properties:
      message:
        example: User info updated successfully.
        type: string
      status:
        example: "1"
        type: string
    type: object
  controllers.fileUploadResponse:
    properties:
      details:
        properties:
          url:
            example: https://quizbuck.s3.ap-south-1.amazonaws.com/uploads/1734090491_new.jpg
            type: string
        type: object
      message:
        example: File uploaded successfully
        type: string
      status:
        example: "1"
        type: string
    type: object
  controllers.transactionResponse:
    properties:
      message:
        example: Transaction successful and user wallet updated.
        type: string
      status:
        example: "1"
        type: string
    type: object
  controllers.userInfo:
    properties:
      details:
        properties:
          ID:
            example: 3
            type: integer
          created:
            example: "2024-12-10T07:04:37Z"
            type: string
          email:
            example: shivam@gmail.com
            type: string
          name:
            example: Shivam
            type: string
          otp:
            example: "8162"
            type: string
          phone:
            example: "9144"
            type: string
          register:
            example: "1"
            type: string
        type: object
      message:
        example: User logged in successfully
        type: string
      status:
        example: "1"
        type: string
    type: object
  controllers.verifyOtpResponse:
    properties:
      details:
        properties:
          ID:
            example: 3
            type: integer
          created:
            example: "2024-12-10T07:04:37Z"
            type: string
          email:
            example: shivam@gmail.com
            type: string
          name:
            example: Shivam
            type: string
          otp:
            example: "8162"
            type: string
          phone:
            example: "9144"
            type: string
          register:
            example: "1"
            type: string
        type: object
      message:
        example: User logged in successfully
        type: string
      status:
        example: "1"
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is list API's to be used in Quiz App.
  termsOfService: http://swagger.io/terms/
  title: Quiz App API's
  version: "1.0"
paths:
  /quizes/get-categories/{user_id}:
    get:
      consumes:
      - application/json
      description: This API will provide list of quiz categories
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.categoryInfo'
      summary: This API will provide list of quiz categories
      tags:
      - Quizes
  /quizes/get-contest-joined-by-user/{user_id}:
    get:
      consumes:
      - application/json
      description: This API will list contest joined by user
      parameters:
      - description: user id
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.JoinedContestResponse'
      summary: This API will list contest joined by user
      tags:
      - Quizes
  /quizes/get-contest-leaderboard/{category_id}:
    get:
      consumes:
      - application/json
      description: This API will provide user contest report
      parameters:
      - description: category_id id
        in: path
        name: category_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetUserContestLeaderboardResponse'
      summary: This API will provide user contest report
      tags:
      - Quizes
  /quizes/get-contest-prize-list-by-category/{category_id}:
    get:
      consumes:
      - application/json
      description: This API will provide contest prizes list by category/contest id
      parameters:
      - description: category_id id
        in: path
        name: category_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.PrizesResponse'
      summary: This API will provide contest prizes list by category/contest id
      tags:
      - Quizes
  /quizes/get-question-by-category/{category_id}:
    get:
      consumes:
      - application/json
      description: This API will provide list of quiz questions
      parameters:
      - description: quiz category id
        in: path
        name: category_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.QuizResponse'
      summary: This API will provide list of quiz questions
      tags:
      - Quizes
  /quizes/get-rules-list-by-category/{category_id}:
    get:
      consumes:
      - application/json
      description: This API will provide contest rules by category/contest id
      parameters:
      - description: category_id id
        in: path
        name: category_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.RulesResponse'
      summary: This API will provide contest rules by category/contest id
      tags:
      - Quizes
  /quizes/get-user-contest-history/{user_id}:
    get:
      consumes:
      - application/json
      description: This API will list contest history joined by user
      parameters:
      - description: user id
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetUserPlayedContestResponse'
      summary: This API will list contest history joined by user
      tags:
      - Quizes
  /quizes/get-user-contest-result/{user_id}/{category_id}:
    get:
      consumes:
      - application/json
      description: This API will provide user contest report
      parameters:
      - description: user_id id
        in: path
        name: user_id
        required: true
        type: string
      - description: category_id id
        in: path
        name: category_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetUserContestReportResponse'
      summary: This API will provide user contest report
      tags:
      - Quizes
  /quizes/user-join-contest:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: This API will make user to join a contest
      parameters:
      - description: user id
        in: formData
        name: user_id
        required: true
        type: integer
      - description: quiz category id
        in: formData
        name: category_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.JoinContestResponse'
      summary: This API will make user to join a contest
      tags:
      - Quizes
  /quizes/user-question-answer:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: This API will record user response for questions
      parameters:
      - description: user id
        in: formData
        name: user_id
        required: true
        type: integer
      - description: quiz category id
        in: formData
        name: category_id
        required: true
        type: string
      - description: quiz question id
        in: formData
        name: question_id
        required: true
        type: string
      - description: quiz answer_given that user has given like a, b, c, d
        in: formData
        name: answer_given
        required: true
        type: string
      - description: if user answer is corect or wrong pass CORRECT/WRONG
        in: formData
        name: answer_type
        required: true
        type: string
      - description: time taken by user to solve the answer in seconds
        in: formData
        name: time_taken
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.QAResponse'
      summary: This API will record user response for questions
      tags:
      - Quizes
  /settings/get-banners-list:
    get:
      consumes:
      - application/json
      description: This API will provide list of banners
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetBannersListResponse'
      summary: This API will provide list of banners
      tags:
      - Settings
  /upload/file:
    post:
      consumes:
      - application/json
      description: upload file to s3
      parameters:
      - description: user file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.fileUploadResponse'
      summary: upload file to s3
      tags:
      - User AUth
  /users/check-user/{phone}:
    get:
      consumes:
      - application/json
      description: generateing OTP for the user
      parameters:
      - description: user phone number
        in: path
        name: phone
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.OTPResponse'
      summary: generateing OTP for the user
      tags:
      - User AUth
  /users/edit-user-profile:
    post:
      consumes:
      - multipart/form-data
      description: This API edits the user profile
      parameters:
      - description: User ID
        in: formData
        name: id
        required: true
        type: string
      - description: User Name
        in: formData
        name: name
        required: true
        type: string
      - description: User Email
        in: formData
        name: email
        required: true
        type: string
      - description: User Phone
        in: formData
        name: phone
        required: true
        type: string
      - description: User Image
        in: formData
        name: image
        required: true
        type: string
      - description: User Gender (Male, Female, Others)
        in: formData
        name: gender
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.editProfileResponse'
      summary: This API edits the user profile
      tags:
      - User Auth
  /users/get-user-wallet-details/{user_id}:
    get:
      consumes:
      - application/json
      description: Fetches user wallet and transaction details
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.APIResponse'
      summary: Get user wallet details
      tags:
      - User Wallet
  /users/get-user/{id}:
    get:
      consumes:
      - application/json
      description: This API will provide user info bu id
      parameters:
      - description: this is user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.userInfo'
      summary: This API will provide user info bu id
      tags:
      - User AUth
  /users/initiate-user-transaction:
    post:
      consumes:
      - multipart/form-data
      description: This API will make user transactions
      parameters:
      - description: User ID
        in: formData
        name: user_id
        required: true
        type: string
      - description: Transaction Amount
        in: formData
        name: amount
        required: true
        type: number
      - description: Transaction Type (CREDIT/DEBIT)
        in: formData
        name: transaction_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.transactionResponse'
      summary: This API will make user transactions
      tags:
      - User Wallet
  /users/verify-otp/{userId}/{otp}:
    get:
      consumes:
      - application/json
      description: This API will verify user OTP with userId
      parameters:
      - description: user app Id
        in: path
        name: userId
        required: true
        type: string
      - description: user otp
        in: path
        name: otp
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.verifyOtpResponse'
      summary: This API will verify user OTP with userId
      tags:
      - User AUth
swagger: "2.0"
